<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
                                   "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
 <sql-query cacheable="true" name="UserEntityList"
   read-only="true">select users.id, users.user_name, users.email, t_languages.description language, t_currencies.description currency, trim(concat(persons.name_first,' ', persons.name_last)) person, users.locked, users.initial, users.active 
  from users left join t_languages 
  on t_languages.key = users.language_key and t_languages.language_key = :p_lang_key
  left outer join  t_currencies
  on t_currencies.key = users.currency_key and t_currencies.language_key = :p_lang_key
  left outer join  persons
  on persons.id = users.person_id
  where users.test = :p_test
  and users.deleted = :p_deleted<return-scalar
   column="id" type="java.lang.String"/>
  <return-scalar column="user_name" type="java.lang.String"/>
  <return-scalar column="email" type="java.lang.String"/>
  <return-scalar column="language" type="java.lang.String"/>
  <return-scalar column="currency" type="java.lang.String"/>
  <return-scalar column="person" type="java.lang.String"/>
  <return-scalar column="locked" type="java.lang.Boolean"/>
  <return-scalar column="initial" type="java.lang.Boolean"/>
  <return-scalar column="active" type="java.lang.Boolean"/>
 </sql-query>
 
 <sql-query cacheable="true" name="PersonEntityList" read-only="true">
SELECT
  persons.id,
  t_salutation.description salutation,
  persons.name_first,
  persons.name_last,
  persons.email,
  t_sex.description sex,
  persons.birthdate,
  persons.street,
  persons.housenumber,
  persons.postcode,
  persons.city,
  persons.state,
  t_countries.description country,
  persons.homepage,
  persons.telephone,
  persons.mobile,
  persons.fax
FROM persons AS persons
  LEFT OUTER JOIN t_sex
    ON t_sex.key = persons.sex_key
      AND t_sex.language_key = :p_lang_key
  LEFT OUTER JOIN t_salutation 
    ON t_salutation.key = persons.salutation_key
      AND t_salutation.language_key = :p_lang_key  
  LEFT OUTER JOIN t_countries
    ON t_countries.key = persons.country_key
      AND t_countries.language_key = :p_lang_key
WHERE persons.test = :p_test
    AND persons.deleted = :p_deleted  
  <return-scalar column="id" type="java.lang.String"/>
  <return-scalar column="salutation" type="java.lang.String"/>
  <return-scalar column="name_first" type="java.lang.String"/>
  <return-scalar column="name_last" type="java.lang.String"/>
  <return-scalar column="email" type="java.lang.String"/>
  <return-scalar column="sex" type="java.lang.String"/>
  <return-scalar column="birthdate" type="java.sql.Timestamp"/>
  <return-scalar column="street" type="java.lang.String"/>
  <return-scalar column="housenumber" type="java.lang.String"/>
  <return-scalar column="postcode" type="java.lang.String"/>
  <return-scalar column="city" type="java.lang.String"/>
  <return-scalar column="state" type="java.lang.String"/> 
  <return-scalar column="country" type="java.lang.String"/>
  <return-scalar column="homepage" type="java.lang.String"/>
  <return-scalar column="telephone" type="java.lang.String"/>
  <return-scalar column="mobile" type="java.lang.String"/>
  <return-scalar column="fax" type="java.lang.String"/>
</sql-query> 

 <sql-query cacheable="true" name="DoctorEntityList" read-only="true">
SELECT
  doctors.id,
  doctors.name,
  doctors.street,
  doctors.housenumber,
  doctors.postcode,
  doctors.city,
  doctors.state,
  t_countries.description country,
  doctors.email,
  doctors.homepage,
  doctors.telephone,
  doctors.mobile,
  doctors.fax
FROM doctors
  LEFT OUTER JOIN t_countries
    ON t_countries.key = doctors.country_key
      AND t_countries.language_key = :p_lang_key
WHERE doctors.test = :p_test
    AND doctors.deleted = :p_deleted  
  <return-scalar column="id" type="java.lang.String"/>
  <return-scalar column="name" type="java.lang.String"/> 
  <return-scalar column="street" type="java.lang.String"/>
  <return-scalar column="housenumber" type="java.lang.String"/>
  <return-scalar column="postcode" type="java.lang.String"/>
  <return-scalar column="city" type="java.lang.String"/>
  <return-scalar column="state" type="java.lang.String"/> 
  <return-scalar column="country" type="java.lang.String"/>
  <return-scalar column="email" type="java.lang.String"/>
  <return-scalar column="homepage" type="java.lang.String"/>
  <return-scalar column="telephone" type="java.lang.String"/>
  <return-scalar column="mobile" type="java.lang.String"/>
  <return-scalar column="fax" type="java.lang.String"/>
</sql-query> 
 
 <sql-query cacheable="true" name="PersonRelationEntityList" read-only="true">
 SELECT
  persons.id,
  t_salutation.description salutation,
  persons.name_first,
  persons.name_last,
  persons.email,
  t_sex.description sex,
  persons.birthdate,
  persons.street,
  persons.housenumber,
  persons.postcode,
  persons.city,
  persons.state,
  t_countries.description country,
  persons.homepage,
  persons.telephone,
  persons.mobile,
  persons.fax
FROM persons
  LEFT OUTER JOIN t_sex
    ON t_sex.key = persons.sex_key
      AND t_sex.language_key = :p_lang_key
  LEFT OUTER JOIN t_salutation
    ON t_salutation.key = persons.salutation_key
      AND t_salutation.language_key = :p_lang_key
  LEFT OUTER JOIN t_countries
    ON t_countries.key = persons.country_key
      AND t_countries.language_key = :p_lang_key    
  JOIN persons_have_relations
    ON (partner2 = persons.id
        AND reltyp_key = :p_reltyp
        AND partner1 = :p_partner1)
       OR (partner1 = persons.id
           AND reltyp_key = :p_reltyp
           AND partner2 = :p_partner2)
WHERE persons.test = :p_test
    AND persons.deleted = :p_deleted
  <return-scalar column="id" type="java.lang.String"/>
  <return-scalar column="salutation" type="java.lang.String"/> 
  <return-scalar column="name_first" type="java.lang.String"/>
  <return-scalar column="name_last" type="java.lang.String"/>
  <return-scalar column="email" type="java.lang.String"/>
  <return-scalar column="sex" type="java.lang.String"/>
  <return-scalar column="birthdate" type="java.sql.Timestamp"/>
  <return-scalar column="street" type="java.lang.String"/>
  <return-scalar column="housenumber" type="java.lang.String"/>
  <return-scalar column="postcode" type="java.lang.String"/>
  <return-scalar column="city" type="java.lang.String"/>
  <return-scalar column="state" type="java.lang.String"/> 
  <return-scalar column="country" type="java.lang.String"/>
  <return-scalar column="homepage" type="java.lang.String"/>
  <return-scalar column="telephone" type="java.lang.String"/>
  <return-scalar column="mobile" type="java.lang.String"/>
  <return-scalar column="fax" type="java.lang.String"/>
</sql-query>  

<sql-query cacheable="true" name="DoctorRelationEntityList" read-only="true">
SELECT
  doctors.id,
  doctors.name,
  doctors.street,
  doctors.housenumber,
  doctors.postcode,
  doctors.city,
  doctors.state,
  t_countries.description country,
  doctors.email,
  doctors.homepage,
  doctors.telephone,
  doctors.mobile,
  doctors.fax
FROM doctors
  LEFT OUTER JOIN t_countries
    ON t_countries.key = doctors.country_key
      AND t_countries.language_key = :p_lang_key
  JOIN persons_have_doctors
    ON (doctor = doctors.id
        AND reltyp_key = :p_reltyp
        AND person = :p_person)   
WHERE doctors.test = :p_test
    AND doctors.deleted = :p_deleted
  <return-scalar column="id" type="java.lang.String"/>
  <return-scalar column="name" type="java.lang.String"/> 
  <return-scalar column="street" type="java.lang.String"/>
  <return-scalar column="housenumber" type="java.lang.String"/>
  <return-scalar column="postcode" type="java.lang.String"/>
  <return-scalar column="city" type="java.lang.String"/>
  <return-scalar column="state" type="java.lang.String"/> 
  <return-scalar column="country" type="java.lang.String"/>
  <return-scalar column="email" type="java.lang.String"/>
  <return-scalar column="homepage" type="java.lang.String"/>
  <return-scalar column="telephone" type="java.lang.String"/>
  <return-scalar column="mobile" type="java.lang.String"/>
  <return-scalar column="fax" type="java.lang.String"/>
</sql-query>  
 
<sql-query cacheable="true" name="PersonPersonRelationList" read-only="true">
SELECT
  phr.id,
  phr.partner1,
  tr.relation_description,
  tr.relation_description_inverse,
  phr.standard,
  phr.reltyp_key,
  phr.partner2
FROM persons_have_relations AS phr
  JOIN t_reltyps AS tr
    ON tr.key = reltyp_key
      AND tr.language_key = :p_lang_key
WHERE phr.reltyp_key = :p_reltyp
OR    1 = :p_dummy
  <return-scalar column="id" type="java.lang.String"/>
  <return-scalar column="partner1" type="java.lang.String"/>
  <return-scalar column="relation_description" type="java.lang.String"/>
  <return-scalar column="relation_description_inverse" type="java.lang.String"/>
  <return-scalar column="standard" type="java.lang.Boolean"/>
  <return-scalar column="reltyp_key" type="java.lang.String"/>
  <return-scalar column="partner2" type="java.lang.String"/>
</sql-query>  

<sql-query cacheable="true" name="PersonDoctorRelationList" read-only="true">
SELECT
  phd.id,
  phd.person,
  tr.relation_description,
  tr.relation_description_inverse,
  phd.standard,
  phd.reltyp_key,
  phd.doctor
FROM persons_have_doctors AS phd
  JOIN t_reltyps AS tr
    ON tr.key = reltyp_key
      AND tr.language_key = :p_lang_key
WHERE phd.reltyp_key = :p_reltyp
OR    1 = :p_dummy
  <return-scalar column="id" type="java.lang.String"/>
  <return-scalar column="person" type="java.lang.String"/>
  <return-scalar column="relation_description" type="java.lang.String"/>
  <return-scalar column="relation_description_inverse" type="java.lang.String"/>
  <return-scalar column="standard" type="java.lang.Boolean"/>
  <return-scalar column="reltyp_key" type="java.lang.String"/>
  <return-scalar column="doctor" type="java.lang.String"/>
</sql-query> 
 
 <sql-query cacheable="true" name="LanguageValueList"
   read-only="true">SELECT k_languages.key, t_languages.description, t_languages.description_long 
  FROM k_languages JOIN t_languages ON k_languages.key = t_languages.key 
  WHERE t_languages.language_key = :p_lang_key<return-scalar
   column="key" type="java.lang.String"/>
  <return-scalar column="description" type="java.lang.String"/>
  <return-scalar column="description_long" type="java.lang.String"/>
 </sql-query>
 <sql-query cacheable="true" name="LogonLanguageValueList"
   read-only="true">SELECT k_languages.key, t_languages.description, t_languages.description_long 
  FROM k_languages JOIN t_languages ON k_languages.key = t_languages.key 
  WHERE t_languages.language_key = :p_lang_key
  AND k_languages.logon = '1'<return-scalar
   column="key" type="java.lang.String"/>
  <return-scalar column="description" type="java.lang.String"/>
  <return-scalar column="description_long" type="java.lang.String"/>
 </sql-query>
 
 <sql-query cacheable="true" name="SalutationValueList" read-only="true">
SELECT
  k_salutation.key,
  t_salutation.description,
  t_salutation.description_long
FROM k_salutation
  JOIN t_salutation
    ON k_salutation.key = t_salutation.key
WHERE t_salutation.language_key = :p_lang_key
  <return-scalar column="key" type="java.lang.String"/>
  <return-scalar column="description" type="java.lang.String"/>
  <return-scalar column="description_long" type="java.lang.String"/>
</sql-query> 

 <sql-query cacheable="true" name="CountryValueList" read-only="true">
SELECT
  k_countries.key,
  t_countries.description,
  t_countries.description_long
FROM k_countries
  JOIN t_countries
    ON k_countries.key = t_countries.key
WHERE t_countries.language_key = :p_lang_key
  <return-scalar column="key" type="java.lang.String"/>
  <return-scalar column="description" type="java.lang.String"/>
  <return-scalar column="description_long" type="java.lang.String"/>
</sql-query> 
 
 <sql-query cacheable="true" name="RelTypsValueList"
   read-only="true">SELECT k_reltyps.key, t_reltyps.description_long, t_reltyps.relation_description 
  FROM k_reltyps JOIN t_reltyps ON k_reltyps.key = t_reltyps.key 
  WHERE t_reltyps.language_key = :p_lang_key
  <return-scalar column="key" type="java.lang.String"/>
  <return-scalar column="description_long" type="java.lang.String"/>
  <return-scalar column="relation_description" type="java.lang.String"/>
 </sql-query> 
 <sql-query name="FunctionTree"
   read-only="true">select rhf.node, rhf.parent, rhf.order, k.key, k.page, k.entity, k.edit, k.create, k.delete, t.description, t.description_long
  from roles_have_functionnodes as rhf, k_functionnodes as k, t_functionnodes as t
  where k.key = rhf.functionnode_key
  and   t.key = k.key
  and   rhf.role_key = :p_role_key
  and   t.language_key = :p_lang_key
  order by rhf.node<return-scalar
   column="node" type="java.lang.Integer"/>
  <return-scalar column="parent" type="java.lang.Integer"/>
  <return-scalar column="order" type="java.lang.Integer"/>
  <return-scalar column="key" type="java.lang.String"/>
  <return-scalar column="page" type="java.lang.String"/>
  <return-scalar column="entity" type="java.lang.String"/>
  <return-scalar column="edit" type="java.lang.Boolean"/>
  <return-scalar column="create" type="java.lang.Boolean"/>
  <return-scalar column="delete" type="java.lang.Boolean"/>
  <return-scalar column="description" type="java.lang.String"/>
  <return-scalar column="description_long" type="java.lang.String"/>
 </sql-query>
</hibernate-mapping>
