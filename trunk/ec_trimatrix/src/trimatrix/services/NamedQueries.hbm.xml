<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
                                   "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
<sql-query cacheable="true" name="UserEntityList" read-only="true">
SELECT
  users.id,
  users.user_name,
  users.email,
  t_languages.description language,
  t_currencies.description currency,
  TRIM(CONCAT(persons.name_first,' ', persons.name_last)) person,
  users.locked,
  users.initial,
  users.active
FROM users
  LEFT JOIN t_languages
    ON t_languages.key = users.language_key
      AND t_languages.language_key = :p_lang_key
  LEFT OUTER JOIN t_currencies
    ON t_currencies.key = users.currency_key
      AND t_currencies.language_key = :p_lang_key
  LEFT OUTER JOIN persons
    ON persons.id = users.person_id
WHERE users.test = :p_test
    AND users.deleted = :p_deleted
  <return-scalar column="id" type="java.lang.String"/>
  <return-scalar column="user_name" type="java.lang.String"/>
  <return-scalar column="email" type="java.lang.String"/>
  <return-scalar column="language" type="java.lang.String"/>
  <return-scalar column="currency" type="java.lang.String"/>
  <return-scalar column="person" type="java.lang.String"/>
  <return-scalar column="locked" type="java.lang.Boolean"/>
  <return-scalar column="initial" type="java.lang.Boolean"/>
  <return-scalar column="active" type="java.lang.Boolean"/>
</sql-query>
 
<sql-query cacheable="true" name="PersonEntityList" read-only="true">
SELECT
  persons.id,
  t_salutation.description salutation,
  persons.name_first,
  persons.name_last,
  persons.email,
  t_sex.description sex,
  persons.birthdate,
  persons.street,
  persons.housenumber,
  persons.postcode,
  persons.city,
  persons.state,
  t_countries.description country,
  persons.homepage,
  persons.telephone,
  persons.mobile,
  persons.fax
FROM persons AS persons
  LEFT OUTER JOIN t_sex
    ON t_sex.key = persons.sex_key
      AND t_sex.language_key = :p_lang_key
  LEFT OUTER JOIN t_salutation 
    ON t_salutation.key = persons.salutation_key
      AND t_salutation.language_key = :p_lang_key  
  LEFT OUTER JOIN t_countries
    ON t_countries.key = persons.country_key
      AND t_countries.language_key = :p_lang_key
WHERE persons.test = :p_test
    AND persons.deleted = :p_deleted  
  <return-scalar column="id" type="java.lang.String"/>
  <return-scalar column="salutation" type="java.lang.String"/>
  <return-scalar column="name_first" type="java.lang.String"/>
  <return-scalar column="name_last" type="java.lang.String"/>
  <return-scalar column="email" type="java.lang.String"/>
  <return-scalar column="sex" type="java.lang.String"/>
  <return-scalar column="birthdate" type="java.sql.Timestamp"/>
  <return-scalar column="street" type="java.lang.String"/>
  <return-scalar column="housenumber" type="java.lang.String"/>
  <return-scalar column="postcode" type="java.lang.String"/>
  <return-scalar column="city" type="java.lang.String"/>
  <return-scalar column="state" type="java.lang.String"/> 
  <return-scalar column="country" type="java.lang.String"/>
  <return-scalar column="homepage" type="java.lang.String"/>
  <return-scalar column="telephone" type="java.lang.String"/>
  <return-scalar column="mobile" type="java.lang.String"/>
  <return-scalar column="fax" type="java.lang.String"/>
</sql-query> 

<sql-query cacheable="true" name="PersonByRoleEntityList" read-only="true">
SELECT DISTINCT
  persons.id,
  t_salutation.description salutation,
  persons.name_first,
  persons.name_last,
  persons.email,
  t_sex.description sex,
  persons.birthdate,
  persons.street,
  persons.housenumber,
  persons.postcode,
  persons.city,
  persons.state,
  t_countries.description country,
  persons.homepage,
  persons.telephone,
  persons.mobile,
  persons.fax
FROM persons
  LEFT OUTER JOIN t_sex
    ON t_sex.key = persons.sex_key
      AND t_sex.language_key = :p_lang_key
  LEFT OUTER JOIN t_salutation
    ON t_salutation.key = persons.salutation_key
      AND t_salutation.language_key = :p_lang_key
  LEFT OUTER JOIN t_countries
    ON t_countries.key = persons.country_key
      AND t_countries.language_key = :p_lang_key
  JOIN users
    ON users.person_id = persons.id
  JOIN users_have_roles uhr
    ON uhr.user_id = users.id
WHERE persons.test = :p_test
    AND persons.deleted = :p_deleted
    AND uhr.role_key = :p_role_key
  <return-scalar column="id" type="java.lang.String"/>
  <return-scalar column="salutation" type="java.lang.String"/>
  <return-scalar column="name_first" type="java.lang.String"/>
  <return-scalar column="name_last" type="java.lang.String"/>
  <return-scalar column="email" type="java.lang.String"/>
  <return-scalar column="sex" type="java.lang.String"/>
  <return-scalar column="birthdate" type="java.sql.Timestamp"/>
  <return-scalar column="street" type="java.lang.String"/>
  <return-scalar column="housenumber" type="java.lang.String"/>
  <return-scalar column="postcode" type="java.lang.String"/>
  <return-scalar column="city" type="java.lang.String"/>
  <return-scalar column="state" type="java.lang.String"/> 
  <return-scalar column="country" type="java.lang.String"/>
  <return-scalar column="homepage" type="java.lang.String"/>
  <return-scalar column="telephone" type="java.lang.String"/>
  <return-scalar column="mobile" type="java.lang.String"/>
  <return-scalar column="fax" type="java.lang.String"/>
</sql-query> 

<sql-query cacheable="true" name="AthletesEntityList" read-only="true">
SELECT
  persons.id,
  t_salutation.description salutation,
  persons.name_first,
  persons.name_last,
  persons.email,
  t_sex.description sex,
  persons.birthdate,
  persons.street,
  persons.housenumber,
  persons.postcode,
  persons.city,
  persons.state,
  t_countries.description country,
  persons.homepage,
  persons.telephone,
  persons.mobile,
  persons.fax
FROM persons
  LEFT OUTER JOIN t_sex
    ON t_sex.key = persons.sex_key
      AND t_sex.language_key = :p_lang_key
  LEFT OUTER JOIN t_salutation
    ON t_salutation.key = persons.salutation_key
      AND t_salutation.language_key = :p_lang_key
  LEFT OUTER JOIN t_countries
    ON t_countries.key = persons.country_key
      AND t_countries.language_key = :p_lang_key
  JOIN persons_athlete pa
    ON pa.id = persons.id 
WHERE persons.test = :p_test
    AND persons.deleted = :p_deleted
  <return-scalar column="id" type="java.lang.String"/>
  <return-scalar column="salutation" type="java.lang.String"/>
  <return-scalar column="name_first" type="java.lang.String"/>
  <return-scalar column="name_last" type="java.lang.String"/>
  <return-scalar column="email" type="java.lang.String"/>
  <return-scalar column="sex" type="java.lang.String"/>
  <return-scalar column="birthdate" type="java.sql.Timestamp"/>
  <return-scalar column="street" type="java.lang.String"/>
  <return-scalar column="housenumber" type="java.lang.String"/>
  <return-scalar column="postcode" type="java.lang.String"/>
  <return-scalar column="city" type="java.lang.String"/>
  <return-scalar column="state" type="java.lang.String"/> 
  <return-scalar column="country" type="java.lang.String"/>
  <return-scalar column="homepage" type="java.lang.String"/>
  <return-scalar column="telephone" type="java.lang.String"/>
  <return-scalar column="mobile" type="java.lang.String"/>
  <return-scalar column="fax" type="java.lang.String"/>
</sql-query> 

<sql-query cacheable="true" name="TestEntityList" read-only="true">
SELECT
  tests.id,
  TRIM(CONCAT(persons.name_first,' ', persons.name_last)) person,  
  doctors.name doctor,
  TRIM(CONCAT(coaches.name_first,' ', coaches.name_last)) coach,  
  t_testtypes.description type,
  tests.date,
  tests.description,
  IF(tests_protocol.id IS NULL, 0, 1) protocol,
  IF(tests_analysis.id IS NULL, 0, 1) analyzed
FROM tests
  LEFT OUTER JOIN tests_protocol
    ON tests_protocol.id = tests.id
  LEFT OUTER JOIN tests_analysis
    ON tests_analysis.id = tests.id  
  LEFT OUTER JOIN persons
    ON persons.id = tests.person_id  
  LEFT OUTER JOIN persons coaches
    ON coaches.id = tests.coach_id    
  LEFT OUTER JOIN doctors
    ON doctors.id = tests.doctor_id    
  LEFT OUTER JOIN t_testtypes
    ON t_testtypes.key = tests.type
    AND t_testtypes.language_key = :p_lang_key
WHERE tests.test = :p_test
    AND tests.deleted = :p_deleted
    AND ( tests.person_id = :p_person OR 0 = :p_person_on )   
    AND ( tests.coach_id = :p_coach OR 0 = :p_coach_on )
    AND ( tests.id = :p_id OR 0 = :p_id_on )
ORDER by tests.created_at DESC
  <return-scalar column="id" type="java.lang.String"/>
  <return-scalar column="person" type="java.lang.String"/>
  <return-scalar column="doctor" type="java.lang.String"/>
  <return-scalar column="coach" type="java.lang.String"/>
  <return-scalar column="type" type="java.lang.String"/>
  <return-scalar column="date" type="java.sql.Timestamp"/>
  <return-scalar column="description" type="java.lang.String"/>
  <return-scalar column="protocol" type="java.lang.Boolean"/>
  <return-scalar column="analyzed" type="java.lang.Boolean"/>
</sql-query> 

<sql-query cacheable="true" name="CompetitionEntityList" read-only="true">
SELECT
  competitions.id,
  competitions.date,
  competitions.description,
  t_comptypes.description type,
  competitions.address,
  t_countries.description country,
  IF(results.id IS NULL, 0, 1) results
FROM competitions
  LEFT OUTER JOIN t_comptypes
    ON t_comptypes.key = competitions.type
      AND t_comptypes.language_key = :p_lang_key
  LEFT OUTER JOIN t_countries
    ON t_countries.key = competitions.country_key
      AND t_countries.language_key = :p_lang_key
  LEFT OUTER JOIN results
    ON results.competition_id = competitions.id
      AND results.deleted = 0
WHERE competitions.test = :p_test
    AND competitions.deleted = :p_deleted
    AND (competitions.id = :p_id
          OR 0 = :p_id_on)
ORDER by competitions.created_at DESC          
  <return-scalar column="id" type="java.lang.String"/>
  <return-scalar column="date" type="java.sql.Timestamp"/>
  <return-scalar column="description" type="java.lang.String"/>  
  <return-scalar column="type" type="java.lang.String"/>
  <return-scalar column="address" type="java.lang.String"/>
  <return-scalar column="country" type="java.lang.String"/>
  <return-scalar column="results" type="java.lang.Boolean"/>
</sql-query>

<sql-query cacheable="true" name="DoctorEntityList" read-only="true">
SELECT
  doctors.id,
  doctors.name,
  doctors.street,
  doctors.housenumber,
  doctors.postcode,
  doctors.city,
  doctors.state,
  t_countries.description country,
  doctors.email,
  doctors.homepage,
  doctors.telephone,
  doctors.mobile,
  doctors.fax
FROM doctors
  LEFT OUTER JOIN t_countries
    ON t_countries.key = doctors.country_key
      AND t_countries.language_key = :p_lang_key
WHERE doctors.test = :p_test
    AND doctors.deleted = :p_deleted  
  <return-scalar column="id" type="java.lang.String"/>
  <return-scalar column="name" type="java.lang.String"/> 
  <return-scalar column="street" type="java.lang.String"/>
  <return-scalar column="housenumber" type="java.lang.String"/>
  <return-scalar column="postcode" type="java.lang.String"/>
  <return-scalar column="city" type="java.lang.String"/>
  <return-scalar column="state" type="java.lang.String"/> 
  <return-scalar column="country" type="java.lang.String"/>
  <return-scalar column="email" type="java.lang.String"/>
  <return-scalar column="homepage" type="java.lang.String"/>
  <return-scalar column="telephone" type="java.lang.String"/>
  <return-scalar column="mobile" type="java.lang.String"/>
  <return-scalar column="fax" type="java.lang.String"/>
</sql-query> 

<sql-query cacheable="true" name="AttachmentEntityList" read-only="true">
SELECT
  attachments.id,
  t_categories.description category,
  attachments.description,
  TRIM(CONCAT(persons.name_first,' ', persons.name_last)) owner,
  attachments.mime_type,
  attachments.file_name,
  attachments.file_size
FROM attachments
  LEFT OUTER JOIN t_categories
    ON t_categories.key = attachments.category_key
      AND t_categories.language_key = :p_lang_key
  LEFT OUTER JOIN persons
    ON persons.id = attachments.owner_id    
WHERE attachments.test = :p_test
    AND attachments.deleted = :p_deleted  
    AND ( attachments.id = :p_id OR 0 = :p_id_on )
  <return-scalar column="id" type="java.lang.String"/>
  <return-scalar column="category" type="java.lang.String"/> 
  <return-scalar column="description" type="java.lang.String"/>
  <return-scalar column="owner" type="java.lang.String"/>
  <return-scalar column="mime_type" type="java.lang.String"/>
  <return-scalar column="file_name" type="java.lang.String"/>
  <return-scalar column="file_size" type="java.lang.Integer"/> 
</sql-query> 
 
 <sql-query cacheable="true" name="PersonRelationEntityList" read-only="true">
 SELECT
  persons.id,
  t_salutation.description salutation,
  persons.name_first,
  persons.name_last,
  persons.email,
  t_sex.description sex,
  persons.birthdate,
  persons.street,
  persons.housenumber,
  persons.postcode,
  persons.city,
  persons.state,
  t_countries.description country,
  persons.homepage,
  persons.telephone,
  persons.mobile,
  persons.fax,
  persons_have_relations.standard
FROM persons
  LEFT OUTER JOIN t_sex
    ON t_sex.key = persons.sex_key
      AND t_sex.language_key = :p_lang_key
  LEFT OUTER JOIN t_salutation
    ON t_salutation.key = persons.salutation_key
      AND t_salutation.language_key = :p_lang_key
  LEFT OUTER JOIN t_countries
    ON t_countries.key = persons.country_key
      AND t_countries.language_key = :p_lang_key    
  JOIN persons_have_relations
    ON (partner2 = persons.id
        AND reltyp_key = :p_reltyp
        AND partner1 = :p_partner1)
       OR (partner1 = persons.id
           AND reltyp_key = :p_reltyp
           AND partner2 = :p_partner2)
WHERE persons.test = :p_test
    AND persons.deleted = :p_deleted
  <return-scalar column="id" type="java.lang.String"/>
  <return-scalar column="salutation" type="java.lang.String"/> 
  <return-scalar column="name_first" type="java.lang.String"/>
  <return-scalar column="name_last" type="java.lang.String"/>
  <return-scalar column="email" type="java.lang.String"/>
  <return-scalar column="sex" type="java.lang.String"/>
  <return-scalar column="birthdate" type="java.sql.Timestamp"/>
  <return-scalar column="street" type="java.lang.String"/>
  <return-scalar column="housenumber" type="java.lang.String"/>
  <return-scalar column="postcode" type="java.lang.String"/>
  <return-scalar column="city" type="java.lang.String"/>
  <return-scalar column="state" type="java.lang.String"/> 
  <return-scalar column="country" type="java.lang.String"/>
  <return-scalar column="homepage" type="java.lang.String"/>
  <return-scalar column="telephone" type="java.lang.String"/>
  <return-scalar column="mobile" type="java.lang.String"/>
  <return-scalar column="fax" type="java.lang.String"/>
  <return-scalar column="standard" type="java.lang.Boolean"/>
</sql-query>  

<sql-query cacheable="true" name="DoctorRelationEntityList" read-only="true">
SELECT
  doctors.id,
  doctors.name,
  doctors.street,
  doctors.housenumber,
  doctors.postcode,
  doctors.city,
  doctors.state,
  t_countries.description country,
  doctors.email,
  doctors.homepage,
  doctors.telephone,
  doctors.mobile,
  doctors.fax,
  persons_have_doctors.standard
FROM doctors
  LEFT OUTER JOIN t_countries
    ON t_countries.key = doctors.country_key
      AND t_countries.language_key = :p_lang_key
  JOIN persons_have_doctors
    ON (doctor = doctors.id
        AND reltyp_key = :p_reltyp
        AND person = :p_person)   
WHERE doctors.test = :p_test
    AND doctors.deleted = :p_deleted
  <return-scalar column="id" type="java.lang.String"/>
  <return-scalar column="name" type="java.lang.String"/> 
  <return-scalar column="street" type="java.lang.String"/>
  <return-scalar column="housenumber" type="java.lang.String"/>
  <return-scalar column="postcode" type="java.lang.String"/>
  <return-scalar column="city" type="java.lang.String"/>
  <return-scalar column="state" type="java.lang.String"/> 
  <return-scalar column="country" type="java.lang.String"/>
  <return-scalar column="email" type="java.lang.String"/>
  <return-scalar column="homepage" type="java.lang.String"/>
  <return-scalar column="telephone" type="java.lang.String"/>
  <return-scalar column="mobile" type="java.lang.String"/>
  <return-scalar column="fax" type="java.lang.String"/>
  <return-scalar column="standard" type="java.lang.Boolean"/>
</sql-query>  

<sql-query cacheable="true" name="AttachmentRelationEntityList" read-only="true">
SELECT
  attachments.id,
  t_categories.description category,
  attachments.description,
  TRIM(CONCAT(persons.name_first,' ', persons.name_last)) owner,
  attachments.mime_type,
  attachments.file_name,
  attachments.file_size
FROM attachments
  LEFT OUTER JOIN t_categories
    ON t_categories.key = attachments.category_key
      AND t_categories.language_key = :p_lang_key
  LEFT OUTER JOIN persons
    ON persons.id = attachments.owner_id  
  JOIN persons_have_attachments
    ON (attachment = attachments.id
        AND reltyp_key = :p_reltyp
        AND person = :p_person)   
WHERE attachments.test = :p_test
    AND attachments.deleted = :p_deleted
UNION
SELECT
  attachments.id,
  t_categories.description category,
  attachments.description,
  TRIM(CONCAT(persons.name_first,' ', persons.name_last)) owner,
  attachments.mime_type,
  attachments.file_name,
  attachments.file_size
FROM attachments
  LEFT OUTER JOIN t_categories
    ON t_categories.key = attachments.category_key
      AND t_categories.language_key = :p_lang_key
  LEFT OUTER JOIN persons
    ON persons.id = attachments.owner_id  
WHERE attachments.owner_id = :p_person
	AND attachments.test = :p_test
    AND attachments.deleted = :p_deleted
  <return-scalar column="id" type="java.lang.String"/>
  <return-scalar column="category" type="java.lang.String"/> 
  <return-scalar column="description" type="java.lang.String"/>
  <return-scalar column="owner" type="java.lang.String"/>
  <return-scalar column="mime_type" type="java.lang.String"/>
  <return-scalar column="file_name" type="java.lang.String"/>
  <return-scalar column="file_size" type="java.lang.Integer"/> 
</sql-query>
 
<sql-query cacheable="true" name="PersonPersonRelationList" read-only="true">
SELECT
  phr.id,
  phr.partner1,
  tr.relation_description,
  tr.relation_description_inverse,
  phr.standard,
  phr.reltyp_key,
  phr.partner2
FROM persons_have_relations AS phr
  JOIN t_reltyps AS tr
    ON tr.key = reltyp_key
      AND tr.language_key = :p_lang_key
WHERE phr.reltyp_key = :p_reltyp
OR    1 = :p_dummy
  <return-scalar column="id" type="java.lang.String"/>
  <return-scalar column="partner1" type="java.lang.String"/>
  <return-scalar column="relation_description" type="java.lang.String"/>
  <return-scalar column="relation_description_inverse" type="java.lang.String"/>
  <return-scalar column="standard" type="java.lang.Boolean"/>
  <return-scalar column="reltyp_key" type="java.lang.String"/>
  <return-scalar column="partner2" type="java.lang.String"/>
</sql-query>  

<sql-query cacheable="true" name="PersonDoctorRelationList" read-only="true">
SELECT
  phd.id,
  phd.person,
  tr.relation_description,
  tr.relation_description_inverse,
  phd.standard,
  phd.reltyp_key,
  phd.doctor
FROM persons_have_doctors AS phd
  JOIN t_reltyps AS tr
    ON tr.key = reltyp_key
      AND tr.language_key = :p_lang_key
WHERE phd.reltyp_key = :p_reltyp
OR    1 = :p_dummy
  <return-scalar column="id" type="java.lang.String"/>
  <return-scalar column="person" type="java.lang.String"/>
  <return-scalar column="relation_description" type="java.lang.String"/>
  <return-scalar column="relation_description_inverse" type="java.lang.String"/>
  <return-scalar column="standard" type="java.lang.Boolean"/>
  <return-scalar column="reltyp_key" type="java.lang.String"/>
  <return-scalar column="doctor" type="java.lang.String"/>
</sql-query> 

<sql-query cacheable="true" name="PersonAttachmentRelationList" read-only="true">
SELECT
  pha.id,
  pha.person,
  tr.relation_description,
  tr.relation_description_inverse,
  pha.standard,
  pha.reltyp_key,
  pha.attachment
FROM persons_have_attachments AS pha
  JOIN t_reltyps AS tr
    ON tr.key = reltyp_key
      AND tr.language_key = :p_lang_key
WHERE pha.reltyp_key = :p_reltyp
OR    1 = :p_dummy
  <return-scalar column="id" type="java.lang.String"/>
  <return-scalar column="person" type="java.lang.String"/>
  <return-scalar column="relation_description" type="java.lang.String"/>
  <return-scalar column="relation_description_inverse" type="java.lang.String"/>
  <return-scalar column="standard" type="java.lang.Boolean"/>
  <return-scalar column="reltyp_key" type="java.lang.String"/>
  <return-scalar column="attachment" type="java.lang.String"/>
</sql-query> 
 
<sql-query cacheable="true" name="CompetitionRelationEntityList" read-only="true">
SELECT
  competitions.id,
  competitions.date,
  competitions.description,
  t_comptypes.description type,
  competitions.address,
  t_countries.description country,
  IF(results.id IS NULL, 0, 1) results
FROM competitions
  LEFT OUTER JOIN t_comptypes
    ON t_comptypes.key = competitions.type
      AND t_comptypes.language_key = :p_lang_key
  LEFT OUTER JOIN t_countries
    ON t_countries.key = competitions.country_key
      AND t_countries.language_key = :p_lang_key
  LEFT OUTER JOIN results
    ON results.competition_id = competitions.id    
      AND results.deleted = 0
  JOIN persons_have_competitions
    ON (persons_have_competitions.competition = competitions.id
        AND persons_have_competitions.reltyp_key = :p_reltyp
        AND persons_have_competitions.person = :p_person)
WHERE competitions.test = :p_test
    AND competitions.deleted = :p_deleted
  <return-scalar column="id" type="java.lang.String"/>
  <return-scalar column="date" type="java.sql.Timestamp"/>
  <return-scalar column="description" type="java.lang.String"/>  
  <return-scalar column="type" type="java.lang.String"/>
  <return-scalar column="address" type="java.lang.String"/>
  <return-scalar column="country" type="java.lang.String"/>
  <return-scalar column="results" type="java.lang.Boolean"/>
</sql-query> 

<sql-query cacheable="true" name="CompetitionScoutRelationEntityList" read-only="true">
SELECT
  competitions.id,
  competitions.date,
  competitions.description,
  t_comptypes.description type,
  competitions.address,
  t_countries.description country,
  IF(results.id IS NULL, 0, 1) results
FROM competitions
  LEFT OUTER JOIN t_comptypes
    ON t_comptypes.key = competitions.type
      AND t_comptypes.language_key = :p_lang_key
  LEFT OUTER JOIN t_countries
    ON t_countries.key = competitions.country_key
      AND t_countries.language_key = :p_lang_key
  LEFT OUTER JOIN results
    ON results.competition_id = competitions.id
      AND results.deleted = 0
  JOIN competitions_scouts
    ON (competitions_scouts.competition_id = competitions.id
      AND competitions_scouts.scout_id = :p_scout)
WHERE competitions.test = :p_test
    AND competitions.deleted = :p_deleted
  <return-scalar column="id" type="java.lang.String"/>
  <return-scalar column="date" type="java.sql.Timestamp"/>
  <return-scalar column="description" type="java.lang.String"/>  
  <return-scalar column="type" type="java.lang.String"/>
  <return-scalar column="address" type="java.lang.String"/>
  <return-scalar column="country" type="java.lang.String"/>
  <return-scalar column="results" type="java.lang.Boolean"/>
</sql-query> 
 
<sql-query cacheable="true" name="ResultEntityList" read-only="true">
 SELECT
  results.id,
  competitions.description competition,
  TRIM(CONCAT(scouts.name_first,' ', scouts.name_last)) scout,
  TRIM(CONCAT(athletes.name_first,' ', athletes.name_last)) athlete,
  results.final_position,
  results.time,
  results.comment
FROM results
  LEFT OUTER JOIN competitions
    ON competitions.id = results.competition_id
  LEFT OUTER JOIN persons scouts
    ON scouts.id = results.scout_id
  LEFT OUTER JOIN persons athletes
    ON athletes.id = results.athlete_id
WHERE results.test = :p_test
    AND results.deleted = :p_deleted
    AND (results.id = :p_id
          OR 0 = :p_id_on)
    AND (results.competition_id = :p_competition
          OR 0 = :p_competition_on)
    AND (results.scout_id = :p_scout
          OR 0 = :p_scout_on)
    AND (results.athlete_id = :p_athlete
          OR 0 = :p_athlete_on)
ORDER BY results.created_at DESC
  <return-scalar column="id" type="java.lang.String"/>
  <return-scalar column="competition" type="java.lang.String"/>
  <return-scalar column="scout" type="java.lang.String"/>
  <return-scalar column="athlete" type="java.lang.String"/>
  <return-scalar column="final_position" type="java.lang.String"/>
  <return-scalar column="time" type="java.lang.String"/>
  <return-scalar column="comment" type="java.lang.String"/>
</sql-query> 
 
 <sql-query cacheable="true" name="LanguageValueList"
   read-only="true">SELECT k_languages.key, t_languages.description, t_languages.description_long 
  FROM k_languages JOIN t_languages ON k_languages.key = t_languages.key 
  WHERE t_languages.language_key = :p_lang_key<return-scalar
   column="key" type="java.lang.String"/>
  <return-scalar column="description" type="java.lang.String"/>
  <return-scalar column="description_long" type="java.lang.String"/>
 </sql-query>
 <sql-query cacheable="true" name="LogonLanguageValueList"
   read-only="true">SELECT k_languages.key, t_languages.description, t_languages.description_long 
  FROM k_languages JOIN t_languages ON k_languages.key = t_languages.key 
  WHERE t_languages.language_key = :p_lang_key
  AND k_languages.logon = '1'<return-scalar
   column="key" type="java.lang.String"/>
  <return-scalar column="description" type="java.lang.String"/>
  <return-scalar column="description_long" type="java.lang.String"/>
 </sql-query>
 
 <sql-query cacheable="true" name="SalutationValueList" read-only="true">
SELECT
  k_salutation.key,
  t_salutation.description,
  t_salutation.description_long
FROM k_salutation
  JOIN t_salutation
    ON k_salutation.key = t_salutation.key
WHERE t_salutation.language_key = :p_lang_key
  <return-scalar column="key" type="java.lang.String"/>
  <return-scalar column="description" type="java.lang.String"/>
  <return-scalar column="description_long" type="java.lang.String"/>
</sql-query> 

 <sql-query cacheable="true" name="CountryValueList" read-only="true">
SELECT
  k_countries.key,
  t_countries.description,
  t_countries.description_long
FROM k_countries
  JOIN t_countries
    ON k_countries.key = t_countries.key
WHERE t_countries.language_key = :p_lang_key
  <return-scalar column="key" type="java.lang.String"/>
  <return-scalar column="description" type="java.lang.String"/>
  <return-scalar column="description_long" type="java.lang.String"/>
</sql-query> 

 <sql-query cacheable="true" name="CategoryValueList" read-only="true">
SELECT
  k_categories.key,
  t_categories.description,
  t_categories.description_long
FROM k_categories
  JOIN t_categories
    ON k_categories.key = t_categories.key
WHERE t_categories.language_key = :p_lang_key
  <return-scalar column="key" type="java.lang.String"/>
  <return-scalar column="description" type="java.lang.String"/>
  <return-scalar column="description_long" type="java.lang.String"/>
</sql-query> 

 <sql-query cacheable="true" name="TestTypeValueList" read-only="true">
SELECT
  k_testtypes.key,
  t_testtypes.description,
  t_testtypes.description_long
FROM k_testtypes
  JOIN t_testtypes
    ON k_testtypes.key = t_testtypes.key
WHERE t_testtypes.language_key = :p_lang_key
  <return-scalar column="key" type="java.lang.String"/>
  <return-scalar column="description" type="java.lang.String"/>
  <return-scalar column="description_long" type="java.lang.String"/>
</sql-query> 

 <sql-query cacheable="true" name="CompTypeValueList" read-only="true">
SELECT
  k_comptypes.key,
  t_comptypes.description,
  t_comptypes.description_long
FROM k_comptypes
  JOIN t_comptypes
    ON k_comptypes.key = t_comptypes.key
WHERE t_comptypes.language_key = :p_lang_key
  <return-scalar column="key" type="java.lang.String"/>
  <return-scalar column="description" type="java.lang.String"/>
  <return-scalar column="description_long" type="java.lang.String"/>
</sql-query> 
 
 <sql-query cacheable="true" name="RelTypsValueList"
   read-only="true">SELECT k_reltyps.key, t_reltyps.description_long, t_reltyps.relation_description 
  FROM k_reltyps JOIN t_reltyps ON k_reltyps.key = t_reltyps.key 
  WHERE t_reltyps.language_key = :p_lang_key
  <return-scalar column="key" type="java.lang.String"/>
  <return-scalar column="description_long" type="java.lang.String"/>
  <return-scalar column="relation_description" type="java.lang.String"/>
 </sql-query> 
 <sql-query name="FunctionTree"
   read-only="true">select rhf.node, rhf.parent, rhf.order, k.key, k.page, k.entity, k.edit, k.create, k.delete, t.description, t.description_long
  from roles_have_functionnodes as rhf, k_functionnodes as k, t_functionnodes as t
  where k.key = rhf.functionnode_key
  and   t.key = k.key
  and   rhf.role_key = :p_role_key
  and   t.language_key = :p_lang_key
  order by rhf.parent, rhf.order<return-scalar
   column="node" type="java.lang.Integer"/>
  <return-scalar column="parent" type="java.lang.Integer"/>
  <return-scalar column="order" type="java.lang.Integer"/>
  <return-scalar column="key" type="java.lang.String"/>
  <return-scalar column="page" type="java.lang.String"/>
  <return-scalar column="entity" type="java.lang.String"/>
  <return-scalar column="edit" type="java.lang.Boolean"/>
  <return-scalar column="create" type="java.lang.Boolean"/>
  <return-scalar column="delete" type="java.lang.Boolean"/>
  <return-scalar column="description" type="java.lang.String"/>
  <return-scalar column="description_long" type="java.lang.String"/>
 </sql-query>
 
<sql-query cacheable="true" name="EntitiesByLabelList" read-only="true">
SELECT
  e.entity entity,
  e.id  
FROM entities_have_labels AS ehl
  JOIN entities AS e
    ON e.id = ehl.entity
WHERE ehl.label = :p_label_id
AND   e.deleted = :p_deleted
ORDER BY e.entity
  <return-scalar column="entity" type="java.lang.String"/>
  <return-scalar column="id" type="java.lang.String"/>
</sql-query> 
</hibernate-mapping>
